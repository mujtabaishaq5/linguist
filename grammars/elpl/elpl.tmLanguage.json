{
  "name": "ELPL",
  "scopeName": "source.elpl",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
     { "include": "#useKeyword" },
    { "include": "#builtins" },
    { "include": "#userFunctions" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#variables" },
    { "include": "#javaDirective" }
   
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.slash.elpl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.elpl",
          "begin": ">>>",
          "end": "<<<"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.elpl",
          "match": "\\b(let|be|if|then|not|otherwise|print|is|Map|greater|function|foreach|call|while|than|repeat|times|and|or|float|Array|to|add|subtract|divide|multiply|not|equal|stop|return|for|less|pels|mels|sels|dels|mls)\\b"
        }
      ]
    },
    "useKeyword": {
      "patterns": [
        {
          "name": "keyword.other.use.elpl",
          "match": "\\buse\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "support.function.builtin.elpl",
          "match": "\\b(length|sum|max|min|sqrt|pow|floor|ceil|reverse|size|put|deepReverse)\\b"
        }
      ]
    },
    "userFunctions": {
      "patterns": [
        {
          "name": "entity.name.function.elpl",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "javaDirective": {
      "patterns": [
        {
          "name": "keyword.other.java.elpl",
          "match": "@java"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.elpl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.elpl",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "name": "constant.numeric.elpl",
      "match": "\\b\\d+(\\.\\d+)?\\b"
    },
    "variables": {
      "name": "variable.other.elpl",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    }
  }
}
